import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import axios from "axios";
import { exec } from "child_process";
import { promisify } from "util";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const envPath = path.join(__dirname, "../.env");

dotenv.config({ path: envPath });

const execAsync = promisify(exec);
const app = express();
const PORT = process.env.WEB_SERVER_PORT || 8080;

const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
const DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions";
const DEEPSEEK_MODEL = "deepseek-chat";

app.use(cors());
app.use(express.json({ limit: "50mb" }));
app.use(express.urlencoded({ limit: "50mb" }));
app.use(express.static(path.join(__dirname, "../web/public")));

console.log("[INIT] API Key configured:", !!DEEPSEEK_API_KEY);

app.get("/api/health", (req, res) => {
  const hasKey = DEEPSEEK_API_KEY && !DEEPSEEK_API_KEY.includes("YOUR_ACTUAL");
  res.json({
    status: "ok",
    apiConfigured: hasKey,
  });
});

async function executeKaliCommand(command, args) {
  console.log(`[CMD] Executing: ${command} ${args}`);
  try {
    const { stdout, stderr } = await execAsync(`${command} ${args}`, {
      timeout: 15000,
      maxBuffer: 5 * 1024 * 1024,
      shell: "/bin/bash",
    });
    const result = stdout || stderr || "Command completed";
    console.log(`[CMD] Result length: ${result.length}`);
    return result.substring(0, 2000); // Limit output
  } catch (error) {
    console.log(`[CMD] Error:`, error.message);
    return `Error: ${error.message}`;
  }
}

app.post("/api/execute", async (req, res) => {
  const { instruction } = req.body;

  console.log(`[API] Request received: ${instruction.substring(0, 100)}`);

  if (!instruction) {
    return res.status(400).json({ error: "Instruction required" });
  }

  if (!DEEPSEEK_API_KEY || DEEPSEEK_API_KEY.includes("YOUR_ACTUAL")) {
    console.log("[API] API Key not configured");
    return res.status(400).json({ error: "API key not configured in .env" });
  }

  res.setHeader("Content-Type", "application/json");

  try {
    console.log("[API] Calling DeepSeek...");

    // Simple prompt for DeepSeek
    const prompt = `You are a Kali Linux security tool assistant. 
User request: ${instruction}

If the user wants you to run a Kali command (nmap, nslookup, ping, etc), respond EXACTLY with:
COMMAND: [tool_name] [arguments]

Otherwise just respond normally.`;

    const response = await axios.post(
      DEEPSEEK_API_URL,
      {
        model: DEEPSEEK_MODEL,
        messages: [
          { role: "user", content: prompt },
        ],
        stream: false,
        temperature: 0.5,
        max_tokens: 500,
      },
      {
        headers: {
          Authorization: `Bearer ${DEEPSEEK_API_KEY}`,
          "Content-Type": "application/json",
        },
        timeout: 45000,
      }
    );

    const aiResponse = response.data.choices[0].message.content;
    console.log("[API] DeepSeek response:", aiResponse.substring(0, 100));

    // Check if AI wants to execute a command
    if (aiResponse.includes("COMMAND:")) {
      const commandMatch = aiResponse.match(/COMMAND:\s*(\w+)\s+(.+?)(?:\n|$)/);
      
      if (commandMatch) {
        const [, tool, args] = commandMatch;
        console.log(`[API] Executing tool: ${tool}`);

        const commandOutput = await executeKaliCommand(tool, args);

        // Get analysis from DeepSeek
        console.log("[API] Getting analysis...");
        const analysisResponse = await axios.post(
          DEEPSEEK_API_URL,
          {
            model: DEEPSEEK_MODEL,
            messages: [
              {
                role: "user",
                content: `Analyze this security tool output:\n\nCommand: ${tool} ${args}\n\nOutput:\n${commandOutput}`,
              },
            ],
            stream: false,
            temperature: 0.5,
            max_tokens: 500,
          },
          {
            headers: {
              Authorization: `Bearer ${DEEPSEEK_API_KEY}`,
              "Content-Type": "application/json",
            },
            timeout: 45000,
          }
        );

        const analysis = analysisResponse.data.choices[0].message.content;

        return res.json({
          success: true,
          executed: true,
          command: `${tool} ${args}`,
          output: commandOutput,
          analysis: analysis,
        });
      }
    }

    // No command execution, just return AI response
    return res.json({
      success: true,
      executed: false,
      response: aiResponse,
    });

  } catch (error) {
    console.error("[API] Error:", error.message);
    const errorMsg = error.response?.data?.error?.message || error.message;
    return res.status(500).json({
      success: false,
      error: errorMsg,
    });
  }
});

app.listen(PORT, "0.0.0.0", () => {
  console.log(`\nðŸš€ Kali MCP running on http://0.0.0.0:${PORT}`);
  console.log(`ðŸ“¡ Ready for commands\n`);
});
